#!/bin/bash

#Author: Ali SeziÅŸli (https://alisezisli.com.tr) (https://gnuadm.in)

#Exit Codes:
#0- Success
#1- Columns or rows are not positive integer
#2- Too many columns or rows
#3- Filename is empty
#4- User didn't want to overwrite existing file
#5- User doesn't have write access to file
#6- CLI arguments are not valid

#Number regex:
number_regex='^[0-9]+$'
#Max rows and columns:
let max_handle=100

help()
{
	#Display help:
	printf "csvbender helps you to split and search through CSV files or generate new ones with random data.\n
Usage: csvbender [ACTION] [OPTIONS]\n
Actions:\n"
    printf "%-15s" "help"
	printf "Displays this message\n"
    printf "%-15s" "generate"
	printf "Generate CSV file with random data (interactive)\n"
    #TODO add new features
    printf "\nExamples:
Generate random data (interactive): csvbender generate
Generate random data with one command: csvbender generate rows columns filename
e.g. csvbender generate 35 42 random.csv\n\n"
}
generate()
{
    columns=$1
    rows=$2
    save_file=$3
    #Columns and rows number check:
    if [[ ! ${columns} =~ ${number_regex} ]] || [[ ! ${rows} =~ ${number_regex} ]]
    then
        echo "Columns and rows must be a positive integer."
        exit 1
    #Columns and rows max number check:
    elif [[ ${columns} -gt ${max_handle} ]] || [[ ${rows} -gt ${max_handle} ]]
    then
        echo "Column or row can be ${max_handle} at most."
        exit 2
    #Filename check:
    elif [[ -z ${save_file} ]]
    then
        echo "Filename can't be empty."
        exit 3
    #Check whether file exists:
    elif [[ -f ${save_file} ]]
    then
        #Overwrite check
        printf "${save_file} already exists. Do you want to overwrite? (y/n): "
        read overwrite_check
        if [[ ${overwrite_check} != "y" ]]
        then
            echo "Operation terminated."
            exit 4
        else
            #Check if user has write permissions on existing file:
            if [[ ! -w ${save_file} ]]
            then
                echo "You don't have write access to ${save_file}."
                exit 5
            fi
        fi
    fi
    #Seems right. Start generating:
    #Change ~ with $HOME:
    save_file=${save_file/#~\//$HOME\/} 
    #Clear the file:
    echo -n "" > ${save_file}
    #Generate the CSV file:
    for row_counter in $( seq 1 ${rows} )
    do
        row_data=""
	    for column_counter in $( seq 1 ${columns} )
        do
            let char_count="${RANDOM:0:1}"+5
            generated_data=$(echo $RANDOM | sha256sum | head -c $char_count)
            row_data=${row_data},${generated_data}
        done
        #Get rid of first comma:
        row_data="${row_data:1}"
        echo ${row_data} >> ${save_file}
        echo "Generated ${row_counter} rows..."
    done
    echo "CSV file with random data generated at ${save_file}"
    exit 0
}

declare -i arg_count=$#

if [ ${arg_count} -gt 999 ]; then
	printf "Too many arguments. Use help for more information.\n"
	exit
fi

case ${arg_count} in
	0)
		#Show help:
        help
		;;
	1)
		#Only one argument:
		if [[ $1 == "help" ]]; then
        help
		elif [[ $1 == "generate" ]]; then
		#Generate interactive:
        printf "How many columns do you need?: "
        read columns
        printf "How many rows do you need?: "
        read rows
        printf "Enter filename: "
        read save_file
        generate ${columns} ${rows} ${save_file}
        else
        echo 'Try "csvbender help" for help.'
        exit 6
		fi
        ;;
    4)
        #Four arguments. Check whether it's generate:
        if [[ $1 == "generate" ]]; then
        generate $2 $3 $4
        else
        echo 'Try "csvbender help" for help.'
        exit 6
        fi
        ;;
esac